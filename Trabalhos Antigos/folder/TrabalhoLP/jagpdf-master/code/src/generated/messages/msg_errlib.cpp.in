#include "precompiled.h"
// Copyright (c) 2005-2009 Jaroslav Gresula
//
// Distributed under the MIT license (See accompanying file
// LICENSE.txt or copy at http://jagpdf.org/LICENSE.txt)
//

// this file was generated by msggen.py

#include <msg_errlib.h>
#include <boost/format.hpp>

using namespace boost;

namespace jag
{

static
shared_ptr<format> my_fmt( const char* fmtstr )
{
    shared_ptr<format> fmter( new format(fmtstr) );
    fmter->exceptions(io::no_error_bits);
    return fmter;
}


msg_invalid_operation::msg_invalid_operation(  )
{
    m_fmt = my_fmt( "Invalid operation." );
    *m_fmt ;
}

msg_invalid_operation::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_operation::msg_id()
{
    return 0x10001;
}



msg_invalid_object_handle::msg_invalid_object_handle(  )
{
    m_fmt = my_fmt( "Invalid object handle." );
    *m_fmt ;
}

msg_invalid_object_handle::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_object_handle::msg_id()
{
    return 0x10002;
}



msg_invalid_argument::msg_invalid_argument(  )
{
    m_fmt = my_fmt( "Invalid argument." );
    *m_fmt ;
}

msg_invalid_argument::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_argument::msg_id()
{
    return 0x10003;
}



msg_null_pointer::msg_null_pointer(  )
{
    m_fmt = my_fmt( "Null pointer." );
    *m_fmt ;
}

msg_null_pointer::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_null_pointer::msg_id()
{
    return 0x10004;
}



msg_internal_error::msg_internal_error(  )
{
    m_fmt = my_fmt( "Internal error. Jagpdf has encountered an unexpected situation." );
    *m_fmt ;
}

msg_internal_error::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_internal_error::msg_id()
{
    return 0x10007;
}



msg_internal_error_s::msg_internal_error_s( char const* p1 )
{
    m_fmt = my_fmt( "Internal error. Jagpdf has encountered an unexpected situation: %1%." );
    *m_fmt  % p1;
}

msg_internal_error_s::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_internal_error_s::msg_id()
{
    return 0x10008;
}



msg_internal_error_si::msg_internal_error_si( char const* p1, int p2 )
{
    m_fmt = my_fmt( "Internal error. Jagpdf has encountered an unexpected situation: %1%(%2%)." );
    *m_fmt  % p1 % p2;
}

msg_internal_error_si::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_internal_error_si::msg_id()
{
    return 0x10009;
}



msg_virtual_fun_not_implemented_s::msg_virtual_fun_not_implemented_s( char const* p1 )
{
    m_fmt = my_fmt( "Virtual function %1% not implemented." );
    *m_fmt  % p1;
}

msg_virtual_fun_not_implemented_s::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_virtual_fun_not_implemented_s::msg_id()
{
    return 0x1000a;
}



msg_option_out_of_range::msg_option_out_of_range( char const* p1 )
{
    m_fmt = my_fmt( "Value of option %1% is out of range." );
    *m_fmt  % p1;
}

msg_option_out_of_range::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_option_out_of_range::msg_id()
{
    return 0x10064;
}



msg_option_invalid_value::msg_option_invalid_value( char const* p1 )
{
    m_fmt = my_fmt( "Value of option %1% is invalid." );
    *m_fmt  % p1;
}

msg_option_invalid_value::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_option_invalid_value::msg_id()
{
    return 0x10065;
}



msg_option_not_found_ex::msg_option_not_found_ex( char const* p1 )
{
    m_fmt = my_fmt( "Required option %1% not present." );
    *m_fmt  % p1;
}

msg_option_not_found_ex::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_option_not_found_ex::msg_id()
{
    return 0x10068;
}



msg_cannot_open_file::msg_cannot_open_file(  )
{
    m_fmt = my_fmt( "Cannot open file." );
    *m_fmt ;
}

msg_cannot_open_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_open_file::msg_id()
{
    return 0x101f5;
}



msg_cannot_write_to_file::msg_cannot_write_to_file(  )
{
    m_fmt = my_fmt( "Cannot write to file." );
    *m_fmt ;
}

msg_cannot_write_to_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_write_to_file::msg_id()
{
    return 0x101f6;
}



msg_cannot_flush_file::msg_cannot_flush_file(  )
{
    m_fmt = my_fmt( "Cannot flush file." );
    *m_fmt ;
}

msg_cannot_flush_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_flush_file::msg_id()
{
    return 0x101f7;
}



msg_cannot_close_file::msg_cannot_close_file(  )
{
    m_fmt = my_fmt( "Cannot close file." );
    *m_fmt ;
}

msg_cannot_close_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_close_file::msg_id()
{
    return 0x101f8;
}



msg_invalid_openning_mode::msg_invalid_openning_mode(  )
{
    m_fmt = my_fmt( "Invalid opening mode specified." );
    *m_fmt ;
}

msg_invalid_openning_mode::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_openning_mode::msg_id()
{
    return 0x101f9;
}



msg_cannot_get_file_offset::msg_cannot_get_file_offset(  )
{
    m_fmt = my_fmt( "Cannot retrieve the current offset." );
    *m_fmt ;
}

msg_cannot_get_file_offset::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_get_file_offset::msg_id()
{
    return 0x101fa;
}



msg_cannot_seek_file::msg_cannot_seek_file(  )
{
    m_fmt = my_fmt( "Cannot seek in file." );
    *m_fmt ;
}

msg_cannot_seek_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_seek_file::msg_id()
{
    return 0x101fb;
}



msg_cannot_read_from_file::msg_cannot_read_from_file(  )
{
    m_fmt = my_fmt( "Cannot read from file." );
    *m_fmt ;
}

msg_cannot_read_from_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_read_from_file::msg_id()
{
    return 0x101fc;
}



msg_cannot_mmap_file::msg_cannot_mmap_file(  )
{
    m_fmt = my_fmt( "Cannot map file to memory." );
    *m_fmt ;
}

msg_cannot_mmap_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_mmap_file::msg_id()
{
    return 0x101fd;
}



msg_cannot_unmmap_file::msg_cannot_unmmap_file(  )
{
    m_fmt = my_fmt( "Cannot unmap file from memory." );
    *m_fmt ;
}

msg_cannot_unmmap_file::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_unmmap_file::msg_id()
{
    return 0x101fe;
}



msg_cannot_write_stream::msg_cannot_write_stream(  )
{
    m_fmt = my_fmt( "Cannot write to a stream." );
    *m_fmt ;
}

msg_cannot_write_stream::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_write_stream::msg_id()
{
    return 0x101ff;
}



msg_cannot_close_stream::msg_cannot_close_stream(  )
{
    m_fmt = my_fmt( "Cannot close a stream." );
    *m_fmt ;
}

msg_cannot_close_stream::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_close_stream::msg_id()
{
    return 0x10200;
}



msg_cannot_get_filesize::msg_cannot_get_filesize(  )
{
    m_fmt = my_fmt( "Cannot get file size." );
    *m_fmt ;
}

msg_cannot_get_filesize::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_get_filesize::msg_id()
{
    return 0x10201;
}



msg_zlib_deflate_init_failed::msg_zlib_deflate_init_failed(  )
{
    m_fmt = my_fmt( "Initialization of zlib's deflate failed." );
    *m_fmt ;
}

msg_zlib_deflate_init_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_deflate_init_failed::msg_id()
{
    return 0x10226;
}



msg_zlib_deflate_failed::msg_zlib_deflate_failed(  )
{
    m_fmt = my_fmt( "Zlib's deflate method failed." );
    *m_fmt ;
}

msg_zlib_deflate_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_deflate_failed::msg_id()
{
    return 0x10227;
}



msg_zlib_deflate_end::msg_zlib_deflate_end(  )
{
    m_fmt = my_fmt( "Zlib's deflatEnd method failed." );
    *m_fmt ;
}

msg_zlib_deflate_end::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_deflate_end::msg_id()
{
    return 0x10228;
}



msg_zlib_inflate_init_failed::msg_zlib_inflate_init_failed(  )
{
    m_fmt = my_fmt( "Initialization of zlib's inflate failed." );
    *m_fmt ;
}

msg_zlib_inflate_init_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_inflate_init_failed::msg_id()
{
    return 0x10229;
}



msg_zlib_inflate_no_more_data_available::msg_zlib_inflate_no_more_data_available(  )
{
    m_fmt = my_fmt( "No other data available, inflate has not finished yet." );
    *m_fmt ;
}

msg_zlib_inflate_no_more_data_available::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_inflate_no_more_data_available::msg_id()
{
    return 0x1022a;
}



msg_zlib_inflate_failed::msg_zlib_inflate_failed(  )
{
    m_fmt = my_fmt( "Zlib's inflate method failed." );
    *m_fmt ;
}

msg_zlib_inflate_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_zlib_inflate_failed::msg_id()
{
    return 0x1022b;
}




} // namespace jag
/** EOF @file */
