// Copyright (c) 2005-2009 Jaroslav Gresula
//
// Distributed under the MIT license (See accompanying file
// LICENSE.txt or copy at http://jagpdf.org/LICENSE.txt)
//

// this file was generated by msggen.py
#ifndef JAG_c8e76b155de97f1ef2098d006d842f95
#define JAG_c8e76b155de97f1ef2098d006d842f95

#include <core/errlib/except.h>
#include <boost/format/format_fwd.hpp>
#include <boost/shared_ptr.hpp>

namespace jag
{


struct msg_std_sec_handler_rev_perm_clash
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_std_sec_handler_rev_perm_clash(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_std_sec_handler_rev_key_len_clash
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_std_sec_handler_rev_key_len_clash(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_page_already_started
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_page_already_started(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_page_not_started
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_page_not_started(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_doc_already_finalized
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_doc_already_finalized(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_feature_not_supported
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_feature_not_supported( char const* p1, int p2, int p3 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_no_graphics_state_to_pop
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_no_graphics_state_to_pop(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_paint_cmd
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_paint_cmd(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cid_fonts_not_supported
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cid_fonts_not_supported(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_16bits_since_15
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_16bits_since_15(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_bookmark_outside_page_def
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_bookmark_outside_page_def(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_no_page_for_destination
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_no_page_for_destination( int p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_destination_not_defined
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_destination_not_defined( int p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_pattern_no_canvas
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_pattern_no_canvas(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_output_font
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_output_font( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_no_chars_used_from_font
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_no_chars_used_from_font(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_function_spec
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_function_spec(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_fn_range_not_set
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_fn_range_not_set(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_fn_inconsistent_c0_c1
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_fn_inconsistent_c0_c1(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_fn_no_ps_function_specified
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_fn_no_ps_function_specified(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_shading_spec
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_shading_spec(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_unknown_shading_type
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_unknown_shading_type(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_shading_invalid_space
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_shading_invalid_space(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_incorrect_matrix
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_incorrect_matrix(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_expected_colored_pattern
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_expected_colored_pattern(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_expected_uncolored_pattern
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_expected_uncolored_pattern(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_tiling_pattern_spec
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_tiling_pattern_spec(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};



} // namespace jag
/** EOF @file */
#endif // JAG_c8e76b155de97f1ef2098d006d842f95
