# Copyright (c) 2005-2009 Jaroslav Gresula
#
# Distributed under the MIT license (See accompanying file
# LICENSE.txt or copy at http://jagpdf.org/LICENSE.txt)
#


list(APPEND SwigFlags
  # module name added manually - solves re-builts as well
  -module jagpdf
  -package com.jagpdf
  )

set(JAG_JAVA_SWIG_SOURCE "${CMAKE_CURRENT_BINARY_DIR}/jagpdf_java.i")
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/jagpdf_java.i.in
  ${JAG_JAVA_SWIG_SOURCE}
  @ONLY)


file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/com/jagpdf/")
configure_file(
  JagPDFException.java
  "${CMAKE_CURRENT_BINARY_DIR}/com/jagpdf/JagPDFException.java"
  COPY_ONLY
)

set(COMPILE_FLAGS "${COMPILE_FLAGS} -fno-strict-aliasing -fno-omit-frame-pointer")

set_source_files_properties(${JAG_JAVA_SWIG_SOURCE}
  PROPERTIES
  CPLUSPLUS ON
  SWIG_FLAGS "${SwigFlags}"
)


set(CMAKE_SWIG_OUTDIR "${CMAKE_CURRENT_BINARY_DIR}/com/jagpdf")
file(MAKE_DIRECTORY ${CMAKE_SWIG_OUTDIR})
SET(SWIG_MODULE_jagpdf_java_EXTRA_DEPS
  ../files.swg
  ${API_SWIG_DIR}/generated.swg)


# set JAVA_HOME so that $JAVA_HOME/include is the dir with jni.h
include_directories(${JAVA_INCLUDE_PATH})
include_directories(${JAVA_INCLUDE_PATH2})

jag_create_rc_file(jagpdf_java "JagPDF for Java.")
swig_add_module(jagpdf_java java ${JAG_JAVA_SWIG_SOURCE} ../swigdllmain.cpp ${jagpdf_java_RC_FILE})
swig_link_libraries(jagpdf_java pdflib-static-core)


if (JAG_GCC_IN_UNIX)
  if(NOT swig_generated_file_fullname)
    message(FATAL_ERROR "${swig_generated_file_fullname}")
  endif()
  # http://weblogs.java.net/blog/kellyohair/archive/2006/01/compilation_of.html
  # otherwise director does not work in linux
  jag_append_source_flag(
    ${swig_generated_file_fullname}
    COMPILE_FLAGS
    "-fno-strict-aliasing"
    "-fno-omit-frame-pointer")

  set_target_properties(jagpdf_java
    PROPERTIES
    LINK_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/export.gcc.map ${LIBSTDCPP_LINK_FLAG}")
endif()
set_target_properties(jagpdf_java PROPERTIES OUTPUT_NAME "jagpdf_java-${JAGPDF_VERSION_MAJOR}.${JAGPDF_VERSION_MINOR}")


#
# compile .java files generated by swig and create a jar file from the produced
# .class
#
# ?? is POST_BUILD ok as it is executed only if the target is not up to date ??

set(JPACKAGE_PREFIX "com/jagpdf/")
if(CMAKE_BUILD_TOOL STREQUAL nmake)
  # when built with nmake, we must to convert to native path, otherwise the java
  # tools won't work
  file(TO_NATIVE_PATH ${JPACKAGE_PREFIX} JPACKAGE_PREFIX)
endif()
set(JAGPDF_JAVA_JAR_PATH "${CMAKE_CURRENT_BINARY_DIR}/${JAGPDF_JAVA_JAR}")
add_custom_command(
  TARGET jagpdf_java POST_BUILD
  COMMAND ${JAVA_COMPILE} "${JPACKAGE_PREFIX}*.java"
  COMMAND ${JAVA_ARCHIVE} -cvf ${JAGPDF_JAVA_JAR_PATH} "${JPACKAGE_PREFIX}*.class"
)



if (JAG_GCC_IN_UNIX)
  set_target_properties(jagpdf_java
    PROPERTIES
    PREFIX "lib"
)
elseif(MSVC_VERSION)
endif()


#
# Installation definition.
#
install( # extension
  TARGETS jagpdf_java
  DESTINATION ${LIB_INSTALL_DIR}
  COMPONENT jagpdf_java)

install( # jar
  FILES "${JAGPDF_JAVA_JAR_PATH}"
  DESTINATION ${LIB_INSTALL_DIR}
  COMPONENT jagpdf_java
  )

install( # other files
  FILES
  ${JAG_DIST_ACCOMPANYING_FILES}
  DESTINATION "."
  COMPONENT jagpdf_java)

#
# Installs jagpdf for java
#
add_custom_target(dist-java
  COMMAND ${CMAKE_COMMAND}
  -D "CMAKE_INSTALL_COMPONENT=jagpdf_java"
  -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake"
  )
add_dependencies(dist-java jagpdf_java)
add_dependencies(dist-all dist-java)

#
# Checks that the produced binary is ok
#
add_custom_target(check-jagpdf-java-binaries
  COMMAND
  ${PYTHON_EXECUTABLE} ${JAG_TOOLS_DIR}/check_package.py ${CMAKE_CURRENT_BINARY_DIR}
  )

ADD_COMPONENT_PACKAGE(jagpdf_java java java-jagpdf)


#
# .deb
# 
set(DEB_SRC_DIR "${CMAKE_SOURCE_DIR}/build/deb/java")
set(DEB_BIN_DIR "${CMAKE_BINARY_DIR}/deb/java/debian")

configure_file("${DEB_SRC_DIR}/prepare.in" "${CMAKE_BINARY_DIR}/deb/java/prepare" @ONLY)
configure_file("${DEB_SRC_DIR}/postinst" "${DEB_BIN_DIR}/DEBIAN/postinst" COPYONLY)
configure_file("${CMAKE_SOURCE_DIR}/build/deb/control.in" "${CMAKE_BINARY_DIR}/deb/java/control.stage" @ONLY)

add_custom_target(deb-java
  COMMAND "${CMAKE_BINARY_DIR}/deb/deb-build.sh" "java" "${CMAKE_INSTALL_PREFIX}"
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/deb/")

add_dependencies(deb-java dist-java)
add_dependencies(deb-all deb-java)
