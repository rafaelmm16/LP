#include "precompiled.h"
// Copyright (c) 2005-2009 Jaroslav Gresula
//
// Distributed under the MIT license (See accompanying file
// LICENSE.txt or copy at http://jagpdf.org/LICENSE.txt)
//

// this file was generated by msggen.py

#include <msg_resources.h>
#include <boost/format.hpp>

using namespace boost;

namespace jag
{

static
shared_ptr<format> my_fmt( const char* fmtstr )
{
    shared_ptr<format> fmter( new format(fmtstr) );
    fmter->exceptions(io::no_error_bits);
    return fmter;
}


msg_not_png_format::msg_not_png_format(  )
{
    m_fmt = my_fmt( "Supplied stream is not PNG format." );
    *m_fmt ;
}

msg_not_png_format::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_not_png_format::msg_id()
{
    return 0x20002;
}



msg_unsupported_image_format::msg_unsupported_image_format(  )
{
    m_fmt = my_fmt( "Unsupported image format." );
    *m_fmt ;
}

msg_unsupported_image_format::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_unsupported_image_format::msg_id()
{
    return 0x20003;
}



msg_error_while_processing_png_format::msg_error_while_processing_png_format( char const* p1 )
{
    m_fmt = my_fmt( "An errorr occurred while processing PNG format: %1%." );
    *m_fmt  % p1;
}

msg_error_while_processing_png_format::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_error_while_processing_png_format::msg_id()
{
    return 0x20004;
}



msg_error_unsupported_color_type_in_png::msg_error_unsupported_color_type_in_png( int p1 )
{
    m_fmt = my_fmt( "Unsupported color type (%1%) in PNG format." );
    *m_fmt  % p1;
}

msg_error_unsupported_color_type_in_png::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_error_unsupported_color_type_in_png::msg_id()
{
    return 0x20005;
}



msg_png_interlacing_other_than_adam7_not_supported::msg_png_interlacing_other_than_adam7_not_supported(  )
{
    m_fmt = my_fmt( "PNG interlacing other than adam7 is not supported." );
    *m_fmt ;
}

msg_png_interlacing_other_than_adam7_not_supported::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_png_interlacing_other_than_adam7_not_supported::msg_id()
{
    return 0x20006;
}



msg_png_empty_palette::msg_png_empty_palette(  )
{
    m_fmt = my_fmt( "PNG file has an empty palette." );
    *m_fmt ;
}

msg_png_empty_palette::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_png_empty_palette::msg_id()
{
    return 0x20007;
}



msg_image_mask_dimension_not_defined::msg_image_mask_dimension_not_defined(  )
{
    m_fmt = my_fmt( "Image mask dimensions not defined." );
    *m_fmt ;
}

msg_image_mask_dimension_not_defined::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_mask_dimension_not_defined::msg_id()
{
    return 0x20008;
}



msg_image_mask_bpc_not_defined::msg_image_mask_bpc_not_defined(  )
{
    m_fmt = my_fmt( "Image mask bits per component not defined." );
    *m_fmt ;
}

msg_image_mask_bpc_not_defined::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_mask_bpc_not_defined::msg_id()
{
    return 0x20009;
}



msg_image_mask_data_not_specified::msg_image_mask_data_not_specified(  )
{
    m_fmt = my_fmt( "Image mask data not specified." );
    *m_fmt ;
}

msg_image_mask_data_not_specified::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_mask_data_not_specified::msg_id()
{
    return 0x2000a;
}



msg_image_data_not_specified::msg_image_data_not_specified(  )
{
    m_fmt = my_fmt( "Image data not specified." );
    *m_fmt ;
}

msg_image_data_not_specified::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_data_not_specified::msg_id()
{
    return 0x2000d;
}



msg_image_dimension_not_defined::msg_image_dimension_not_defined(  )
{
    m_fmt = my_fmt( "Image dimensions not defined." );
    *m_fmt ;
}

msg_image_dimension_not_defined::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_dimension_not_defined::msg_id()
{
    return 0x2000e;
}



msg_image_bpc_not_defined::msg_image_bpc_not_defined(  )
{
    m_fmt = my_fmt( "Image bits per component not defined." );
    *m_fmt ;
}

msg_image_bpc_not_defined::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_image_bpc_not_defined::msg_id()
{
    return 0x2000f;
}



msg_typeface_data_not_specified::msg_typeface_data_not_specified(  )
{
    m_fmt = my_fmt( "Typeface data not specified." );
    *m_fmt ;
}

msg_typeface_data_not_specified::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_typeface_data_not_specified::msg_id()
{
    return 0x20010;
}



msg_unknown_font_format::msg_unknown_font_format(  )
{
    m_fmt = my_fmt( "Unknown font format." );
    *m_fmt ;
}

msg_unknown_font_format::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_unknown_font_format::msg_id()
{
    return 0x20011;
}



msg_tt_table_not_found::msg_tt_table_not_found( char const* p1 )
{
    m_fmt = my_fmt( "TrueType table %1% not found." );
    *m_fmt  % p1;
}

msg_tt_table_not_found::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_table_not_found::msg_id()
{
    return 0x20012;
}



msg_freetype_failed::msg_freetype_failed( int p1 )
{
    m_fmt = my_fmt( "FreeType call failed with code %1%." );
    *m_fmt  % p1;
}

msg_freetype_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_freetype_failed::msg_id()
{
    return 0x20013;
}



msg_tt_required_table_missing::msg_tt_required_table_missing(  )
{
    m_fmt = my_fmt( "Required TrueType font table is missing." );
    *m_fmt ;
}

msg_tt_required_table_missing::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_required_table_missing::msg_id()
{
    return 0x20014;
}



msg_tt_invalid_magic_number::msg_tt_invalid_magic_number(  )
{
    m_fmt = my_fmt( "Invalid TrueType font magic number." );
    *m_fmt ;
}

msg_tt_invalid_magic_number::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_invalid_magic_number::msg_id()
{
    return 0x20015;
}



msg_tt_file_checksum_failed::msg_tt_file_checksum_failed(  )
{
    m_fmt = my_fmt( "Checksum of TrueType font failed." );
    *m_fmt ;
}

msg_tt_file_checksum_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_file_checksum_failed::msg_id()
{
    return 0x20016;
}



msg_tt_zero_table_size::msg_tt_zero_table_size(  )
{
    m_fmt = my_fmt( "Size of TrueType font table is zero." );
    *m_fmt ;
}

msg_tt_zero_table_size::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_zero_table_size::msg_id()
{
    return 0x20017;
}



msg_tt_wrong_table_size::msg_tt_wrong_table_size(  )
{
    m_fmt = my_fmt( "Size of TrueType font table is wrong." );
    *m_fmt ;
}

msg_tt_wrong_table_size::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_wrong_table_size::msg_id()
{
    return 0x20018;
}



msg_tt_cannot_read_table::msg_tt_cannot_read_table(  )
{
    m_fmt = my_fmt( "Cannot read TrueType font table." );
    *m_fmt ;
}

msg_tt_cannot_read_table::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_cannot_read_table::msg_id()
{
    return 0x20019;
}



msg_tt_table_checksum_failed::msg_tt_table_checksum_failed(  )
{
    m_fmt = my_fmt( "Checksum of TrueType font table failed." );
    *m_fmt ;
}

msg_tt_table_checksum_failed::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_table_checksum_failed::msg_id()
{
    return 0x2001a;
}



msg_tt_cannot_read::msg_tt_cannot_read(  )
{
    m_fmt = my_fmt( "Reading of TrueType font failed." );
    *m_fmt ;
}

msg_tt_cannot_read::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_cannot_read::msg_id()
{
    return 0x2001c;
}



msg_tt_no_postscript_name::msg_tt_no_postscript_name(  )
{
    m_fmt = my_fmt( "PostScript name not defined in TrueType font." );
    *m_fmt ;
}

msg_tt_no_postscript_name::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_no_postscript_name::msg_id()
{
    return 0x2001d;
}



msg_tt_psname_invalid_chars::msg_tt_psname_invalid_chars(  )
{
    m_fmt = my_fmt( "Invalid character(s) in Postscript name in TrueType font." );
    *m_fmt ;
}

msg_tt_psname_invalid_chars::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_psname_invalid_chars::msg_id()
{
    return 0x2001e;
}



msg_tt_inconsistent_loca::msg_tt_inconsistent_loca(  )
{
    m_fmt = my_fmt( "Inconsistent format of TrueType font LOCA table." );
    *m_fmt ;
}

msg_tt_inconsistent_loca::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_inconsistent_loca::msg_id()
{
    return 0x2001f;
}



msg_tt_name_table_invalid_fmt::msg_tt_name_table_invalid_fmt(  )
{
    m_fmt = my_fmt( "Invalid format of TrueType font name table." );
    *m_fmt ;
}

msg_tt_name_table_invalid_fmt::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_tt_name_table_invalid_fmt::msg_id()
{
    return 0x20020;
}



msg_invalid_font_spec_str::msg_invalid_font_spec_str(  )
{
    m_fmt = my_fmt( "Error while parsing font spec string." );
    *m_fmt ;
}

msg_invalid_font_spec_str::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_font_spec_str::msg_id()
{
    return 0x20021;
}



msg_cannot_find_font::msg_cannot_find_font( char const* p1 )
{
    m_fmt = my_fmt( "Cannot find typeface '%1%'." );
    *m_fmt  % p1;
}

msg_cannot_find_font::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_cannot_find_font::msg_id()
{
    return 0x20022;
}



msg_default_typeface_not_found::msg_default_typeface_not_found(  )
{
    m_fmt = my_fmt( "Default typeface not found." );
    *m_fmt ;
}

msg_default_typeface_not_found::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_default_typeface_not_found::msg_id()
{
    return 0x20023;
}



msg_font_file_not_found::msg_font_file_not_found(  )
{
    m_fmt = my_fmt( "Font file not found." );
    *m_fmt ;
}

msg_font_file_not_found::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_font_file_not_found::msg_id()
{
    return 0x20024;
}



msg_font_size_not_set::msg_font_size_not_set(  )
{
    m_fmt = my_fmt( "Font size is not specified." );
    *m_fmt ;
}

msg_font_size_not_set::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_font_size_not_set::msg_id()
{
    return 0x20025;
}



msg_face_or_name_must_be_set::msg_face_or_name_must_be_set(  )
{
    m_fmt = my_fmt( "Neither family name nor font file specified." );
    *m_fmt ;
}

msg_face_or_name_must_be_set::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_face_or_name_must_be_set::msg_id()
{
    return 0x20026;
}



msg_face_or_name::msg_face_or_name(  )
{
    m_fmt = my_fmt( "Either only font family or only font file must be specified (not both)." );
    *m_fmt ;
}

msg_face_or_name::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_face_or_name::msg_id()
{
    return 0x20027;
}



msg_unrecognized_char_enc::msg_unrecognized_char_enc( char const* p1 )
{
    m_fmt = my_fmt( "Unrecognized encoding '%1%'." );
    *m_fmt  % p1;
}

msg_unrecognized_char_enc::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_unrecognized_char_enc::msg_id()
{
    return 0x20028;
}



msg_enc_not_supported_by_sys_font_mapper::msg_enc_not_supported_by_sys_font_mapper(  )
{
    m_fmt = my_fmt( "Encoding not supported by Windows font mapping." );
    *m_fmt ;
}

msg_enc_not_supported_by_sys_font_mapper::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_enc_not_supported_by_sys_font_mapper::msg_id()
{
    return 0x20029;
}



msg_font_family_not_present::msg_font_family_not_present(  )
{
    m_fmt = my_fmt( "Font does not define a family name." );
    *m_fmt ;
}

msg_font_family_not_present::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_font_family_not_present::msg_id()
{
    return 0x2002a;
}



msg_invalid_cs_spec::msg_invalid_cs_spec(  )
{
    m_fmt = my_fmt( "Invalid color space specification." );
    *m_fmt ;
}

msg_invalid_cs_spec::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_cs_spec::msg_id()
{
    return 0x2002b;
}



msg_not_jpeg_format::msg_not_jpeg_format(  )
{
    m_fmt = my_fmt( "Supplied stream is not supported JPEG format." );
    *m_fmt ;
}

msg_not_jpeg_format::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_not_jpeg_format::msg_id()
{
    return 0x2002c;
}



msg_corrupted_jpeg::msg_corrupted_jpeg(  )
{
    m_fmt = my_fmt( "Corrupted JPEG format." );
    *m_fmt ;
}

msg_corrupted_jpeg::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_corrupted_jpeg::msg_id()
{
    return 0x2002d;
}



msg_no_color_space_spec::msg_no_color_space_spec(  )
{
    m_fmt = my_fmt( "Color space not specified." );
    *m_fmt ;
}

msg_no_color_space_spec::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_no_color_space_spec::msg_id()
{
    return 0x2002e;
}



msg_pattern_cs_used_for_image::msg_pattern_cs_used_for_image(  )
{
    m_fmt = my_fmt( "An image cannot have a pattern color space." );
    *m_fmt ;
}

msg_pattern_cs_used_for_image::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_pattern_cs_used_for_image::msg_id()
{
    return 0x2002f;
}



msg_invalid_fn_spec::msg_invalid_fn_spec(  )
{
    m_fmt = my_fmt( "Invalid function specification." );
    *m_fmt ;
}

msg_invalid_fn_spec::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_invalid_fn_spec::msg_id()
{
    return 0x20031;
}



msg_core_font_with_unicode_enc::msg_core_font_with_unicode_enc(  )
{
    m_fmt = my_fmt( "Cannot register Adobe core font with a Unicode encoding." );
    *m_fmt ;
}

msg_core_font_with_unicode_enc::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_core_font_with_unicode_enc::msg_id()
{
    return 0x20032;
}



msg_failed_to_load_png::msg_failed_to_load_png(  )
{
    m_fmt = my_fmt( "Failed to load PNG." );
    *m_fmt ;
}

msg_failed_to_load_png::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_failed_to_load_png::msg_id()
{
    return 0x20033;
}



msg_unknown_image_type::msg_unknown_image_type(  )
{
    m_fmt = my_fmt( "Cannot recognize the image format." );
    *m_fmt ;
}

msg_unknown_image_type::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_unknown_image_type::msg_id()
{
    return 0x20034;
}



msg_enc_no_specified_sys_font_mapper::msg_enc_no_specified_sys_font_mapper(  )
{
    m_fmt = my_fmt( "Windows font mapping requires an encoding." );
    *m_fmt ;
}

msg_enc_no_specified_sys_font_mapper::operator msg_info_t() const
{
    return msg_info_t( msg_id(), m_fmt->str() );
}

unsigned msg_enc_no_specified_sys_font_mapper::msg_id()
{
    return 0x20035;
}




} // namespace jag
/** EOF @file */
