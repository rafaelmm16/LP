// Copyright (c) 2005-2009 Jaroslav Gresula
//
// Distributed under the MIT license (See accompanying file
// LICENSE.txt or copy at http://jagpdf.org/LICENSE.txt)
//

// this file was generated by msggen.py
#ifndef JAG_400c081fc03ed794e24a175fd6c0631d
#define JAG_400c081fc03ed794e24a175fd6c0631d

#include <core/errlib/except.h>
#include <boost/format/format_fwd.hpp>
#include <boost/shared_ptr.hpp>

namespace jag
{


struct msg_invalid_operation
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_operation(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_object_handle
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_object_handle(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_argument
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_argument(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_null_pointer
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_null_pointer(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_internal_error
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_internal_error(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_internal_error_s
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_internal_error_s( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_internal_error_si
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_internal_error_si( char const* p1, int p2 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_virtual_fun_not_implemented_s
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_virtual_fun_not_implemented_s( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_option_out_of_range
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_option_out_of_range( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_option_invalid_value
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_option_invalid_value( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_option_not_found_ex
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_option_not_found_ex( char const* p1 );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_open_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_open_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_write_to_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_write_to_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_flush_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_flush_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_close_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_close_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_invalid_openning_mode
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_invalid_openning_mode(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_get_file_offset
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_get_file_offset(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_seek_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_seek_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_read_from_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_read_from_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_mmap_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_mmap_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_unmmap_file
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_unmmap_file(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_write_stream
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_write_stream(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_close_stream
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_close_stream(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_cannot_get_filesize
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_cannot_get_filesize(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_deflate_init_failed
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_deflate_init_failed(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_deflate_failed
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_deflate_failed(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_deflate_end
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_deflate_end(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_inflate_init_failed
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_inflate_init_failed(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_inflate_no_more_data_available
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_inflate_no_more_data_available(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};


struct msg_zlib_inflate_failed
{
    boost::shared_ptr<boost::format> m_fmt;
public:
    msg_zlib_inflate_failed(  );
    operator msg_info_t() const;
    static unsigned msg_id();
};



} // namespace jag
/** EOF @file */
#endif // JAG_400c081fc03ed794e24a175fd6c0631d
